// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Enums ---

enum UserRole {
  USER
  ADMIN
}

// --- Core Models ---

model User {
  id            String   @id @default(uuid())
  name          String   @unique
  email         String   @unique
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          UserRole @default(USER)
  // CORRECTED: Relation field for all tickets booked by this user
  ticketsBooked Ticket[]
}

model Ticket {
  id          String       @id @default(uuid())
  totalPrice  Decimal
  seats       TicketSeat[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  showtimeId  Int
  showtime    Showtime     @relation(fields: [showtimeId], references: [id], onDelete: Restrict)
  bookedSeats BookedSeat[]
}

model BookedSeat {
  id         String   @id @default(uuid())
  seatId     String // e.g., "A5", "VIP-C1"
  showtimeId Int
  showtime   Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  ticketId   String
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([showtimeId, seatId])
}

model TicketSeat {
  seatId   String // The unique ID of the seat (e.g., from a Seat model)
  row      String
  seat     String
  type     String
  price    Decimal
  // ✅ FIX: Renamed primary key to 'id'
  id       String  @id @default(uuid())
  ticketId String
  ticket   Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  // Combined key for uniqueness, if necessary, though 'id' is sufficient
  // @@unique([seatId, ticketId]) 
}

// --- Movie/Showtime Models ---

model Movie {
  id          String     @id @default(uuid())
  title       String
  rating      Float
  genre       String[]
  language    String
  duration    String
  poster      String
  backdrop    String
  releaseDate DateTime   @db.Date
  votes       String
  synopsis    String
  cast        String[]
  director    String
  showtimes   Showtime[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Showtime {
  id         Int         @id @default(autoincrement())
  time       String
  theater    String
  seatPrices SeatPrice[]
  filling    String
  movieId    String
  movie      Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // ✅ ADDED: Reverse relation for all tickets for this showtime
  tickets    Ticket[]
  BookedSeat BookedSeat[]

  @@unique([movieId, time, theater])
}

// --- Configuration Model for Seat Pricing ---
model SeatPrice {
  id         Int      @id @default(autoincrement())
  // The type of seat (e.g., "Standard", "Premium", "VIP")
  seatType   String
  price      Decimal  @db.Money
  showtimeId Int
  showtime   Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)

  // Constraint: A showtime can only have one price defined per seat type
  @@unique([showtimeId, seatType])
}
